syntax = "proto3";
package courier;

/// Service for working with posts that were scraped from feeds.
service Posts {
  /// Gets a list of posts for a particular user.
  rpc GetUserPosts(ListUserPostsRequest) returns (PostList);

  /// Gets a single post.
  rpc GetPost(GetPostRequest) returns (Post);

  /// Imports a post from a user's feed.
  rpc ImportPost(ImportPostRequest) returns (Post);

  /// Cancels a tweet, preventing it from being posted to Twitter automatically.
  rpc CancelTweet(CancelTweetRequest) returns (PostTweet);

  /// Updates the content of a tweet before posting it.
  rpc UpdateTweet(UpdateTweetRequest) returns (PostTweet);

  /// Posts the tweet to twitter.
  rpc SubmitTweet(SubmitTweetRequest) returns (PostTweet);
}

/// Request message for listing posts for a user.
message ListUserPostsRequest {
  /// The ID of the users whose posts should be listed.
  int32 user_id = 1;
}

/// Request message for getting a single post.
message GetPostRequest {
  /// The ID of the post to get.
  int64 id = 1;
}

/**
 * Request message for importing a user post.
 * A post may be imported multiple times, presumably each time the feed is scraped while the post is present in the feed. If the post has been imported before, it will be updated.
 */
message ImportPostRequest {
  /// The ID of the user whose feed the post is imported from.
  int32 user_id = 1;
  /// The post information to import.
  Post post = 2;
}

/// Request message for canceling a tweet from being posted.
message CancelTweetRequest {
  /// The ID of the tweet to cancel.
  int64 id = 1;
}

/// Request message for updating the content of a tweet.
message UpdateTweetRequest {
  /// The ID of the tweet to update.
  int64 id = 1;
  /// The new body of the tweet.
  string body = 2;
}

/// Request message for posting a tweet to Twitter.
message SubmitTweetRequest {
  /// The ID of the tweet to post.
  int64 id = 1;
}

/// Message containing a list of multiple Posts.
message PostList {
  /// The posts in the list.
  repeated Post posts = 1;
}

/**
 * Message describing a post that was scraped from a feed.
 * Many of the fields for a post are pulled directly from a matching JSON Feed field.
 */
message Post {
  /// Autogenerated unique identifier for the post.
  int64 id = 7;
  /**
   * Unique identifier for the post within its feed.
   * Assigned by the feed author. If a post is updated, its ID should not change.
   */
  string item_id = 1;
  /// The identifier of the feed the post was imported from.
  int32 feed_id = 2;
  /// The HTML content of the post. May not be present if content_text is present.
  string content_html = 3;
  /// The plain text content of the post. May not be present if content_html is present.
  string content_text = 4;
  /// The title of the post. May be empty for posts with no title.
  string title = 5;
  /// The URL of the post. In many feeds, this will be the same as the id, but it does not have to be.
  string url = 6;
  /// The tweets that contain the content of this post.
  repeated PostTweet tweets = 9;
  /// The date the post was published, as an ISO 8601 date string.
  string published_at = 10;
  /// The date the post was last modified, as an ISO 8601 date string.
  string modified_at = 11;
}

/// A tweet that was translated from a post.
message PostTweet {
  /// Autogenerated unique identifier for the tweet.
  int64 id = 1;
  /// The ID of the post this tweet was translated from.
  int64 post_id = 2;
  /// The body text of the tweet.
  string body = 3;

  /// The status of a tweet.
  enum Status {
    /// The tweet is intended to be posted but it has not been yet.
    DRAFT = 0;
    /// The user decided not to post the tweet.
    CANCELED = 1;
    /// The tweet has already been posted to Twitter.
    POSTED = 2;
  }

  /// The status of the tweet.
  Status status = 4;
}
